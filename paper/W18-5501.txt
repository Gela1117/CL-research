The Fact Extraction and VERiﬁcation (FEVER) Shared Task

James Thorne1, Andreas Vlachos1, Oana Cocarascu2,

Christos Christodoulopoulos3, and Arpit Mittal3

1Department of Computer Science, University of Shefﬁeld

2Department of Computing, Imperial College London
{j.thorne, a.vlachos}@sheffield.ac.uk

3Amazon Research Cambridge

oana.cocarascu11@imperial.ac.uk
{chrchrs, mitarpit}@amazon.co.uk

Abstract

We present the results of the ﬁrst Fact Extrac-
tion and VERiﬁcation (FEVER) Shared Task.
The task challenged participants to classify
whether human-written factoid claims could
be SUPPORTED or REFUTED using evidence
retrieved from Wikipedia. We received entries
from 23 competing teams, 19 of which scored
higher than the previously published base-
line. The best performing system achieved a
FEVER score of 64.21%.
In this paper, we
present the results of the shared task and a
summary of the systems, highlighting com-
monalities and innovations among participat-
ing systems.
Introduction

1
Information extraction is a well studied domain
and the outputs of such systems enable many nat-
ural language technologies such as question an-
swering and text summarization. However, since
information sources can contain errors, there ex-
ists an additional need to verify whether the infor-
mation is correct. For this purpose, we hosted the
ﬁrst Fact Extraction and VERiﬁcation (FEVER)
shared task to raise interest in and awareness of
the task of automatic information veriﬁcation -
a research domain that is orthogonal to informa-
tion extraction. This shared task required partic-
ipants to develop systems to predict the veracity
of human-generated textual claims against textual
evidence to be retrieved from Wikipedia.

We constructed a purpose-built dataset

for
this task (Thorne et al., 2018) that contains
185,445 human-generated claims, manually veri-
ﬁed against the introductory sections of Wikipedia
pages and labeled as SUPPORTED, REFUTED or
NOTENOUGHINFO. The claims were generated
by paraphrasing facts from Wikipedia and mutat-
ing them in a variety of ways, some of which were
meaning-altering. For each claim, and without

the knowledge of where the claim was generated
from, annotators selected evidence in the form of
sentences from Wikipedia to justify the labeling of
the claim.

The systems participating in the FEVER shared
task were required to label claims with the cor-
rect class and also return the sentence(s) forming
the necessary evidence for the assigned label. Per-
forming well at this task requires both identifying
relevant evidence and reasoning correctly with re-
spect to the claim. A key difference between this
task and other textual entailment and natural lan-
guage inference tasks (Dagan et al., 2009; Bow-
man et al., 2015) is the need to identify the evi-
dence from a large textual corpus. Furthermore,
in comparison to large-scale question answering
tasks (Chen et al., 2017), systems must reason
about information that is not present in the claim.
We hope that research in these ﬁelds will be stim-
ulated by the challenges present in FEVER.

One of the limitations of using human annota-
tors to identify correct evidence when constructing
the dataset was the trade-off between annotation
velocity and evidence recall (Thorne et al., 2018).
Evidence selected by annotators was often incom-
plete. As part of the FEVER shared task, any ev-
idence retrieved by participating systems that was
not contained in the original dataset was annotated
and used to augment the evidence in the test set.

In this paper, we present a short description of
the task and dataset, present a summary of the sub-
missions and the leader board, and highlight future
research directions.

2 Task Description

Candidate systems for the FEVER shared task
were given a sentence of unknown veracity called
a claim. The systems must identify suitable ev-
idence from Wikipedia at the sentence level and

ProceedingsoftheFirstWorkshoponFactExtractionandVERiﬁcation(FEVER),pages1–9Brussels,Belgium,November1,2018.c(cid:13)2018AssociationforComputationalLinguistics1Claim: The Rodney King riots took place in

the most populous county in the USA.

[wiki/Los Angeles Riots]

Los

1992

riots,

Angeles

The
also known as the Rodney King riots
lootings, ar-
were a series of riots,
sons,
that
occurred in Los Angeles County, Cali-
fornia in April and May 1992.
[wiki/Los Angeles County]

disturbances

civil

and

Angeles
County

ofﬁcially
Los
Angeles,
the
is the most populous county in the USA.

County,
of
Los

Verdict: Supported

Figure 1: Example claim from the FEVER shared task:
a manually veriﬁed claim that requires evidence from
multiple Wikipedia pages.

assign a label whether, given the evidence, the
claim is SUPPORTED, REFUTED or whether there
is NOTENOUGHINFO in Wikipedia to reach a con-
clusion. In 16.82% of cases, claims required the
combination of more than one sentence as support-
ing or refuting evidence. An example is provided
in Figure 1.

2.1 Data

Training and development data was released
through the FEVER website.1 We used the re-
served portion of the data presented in Thorne
et al. (2018) as a blind test set. Disjoint train-
ing, development and test splits of the dataset were
generated by splitting the dataset by the page used
to generate the claim. The development and test
datasets were balanced by randomly discarding
claims from the more populous classes.

Split

Training

Dev
Test

SUPPORTED REFUTED

80,035
6,666
6,666

29,775
6,666
6,666

NEI
35,639
6,666
6,666

Table 1: Dataset split sizes for SUPPORTED, REFUTED
and NOTENOUGHINFO (NEI) classes

1http://fever.ai

2.2 Scoring Metric

We used the scoring metric described in Thorne
et al. (2018) to evaluate the submissions. The
FEVER shared task requires submission of evi-
dence to justify the labeling of a claim. The train-
ing, development and test data splits contain mul-
tiple sets of evidence for each claim, each set be-
ing a minimal set of sentences that fully support or
refute it. The primary scoring metric for the task
is the label accuracy conditioned on providing at
least one complete set of evidence, referred to as
the FEVER score. Sentences labeled (correctly) as
NOTENOUGHINFO do not require evidence. Cor-
rectly labeled claims with no or only partial ev-
idence received no points for the FEVER score.
Where multiple sets of evidence was annotated in
the data, only one set was required for the claim to
be considered correct for the FEVER score.

Since the development and evaluation data
splits are balanced, random baseline label ac-
curacy ignoring the requirement for evidence is
33.33%. This performance level can also be
achieved for the FEVER score by predicting
NOTENOUGHINFO for every claim. However,
as the FEVER score requires evidence for SUP-
PORTED and REFUTED claims, a random baseline
is expected to score lower on this metric.

We provide an open-source release of the scor-
ing software.2 Beyond the FEVER score, it com-
putes precision, recall, F1, and label accuracy to
provide diagnostic information. The recall point
is awarded, as is the case for the FEVER score,
only by providing a complete set of evidence for
the claim.

2.3 Submissions

The FEVER shared task was hosted as a competi-
tion on Codalab3 which allowed submissions to be
scored against the blind test set without the need
to publish the correct labels. The scoring system
was open from 24th to 27th July 2018. Partici-
pants were limited to 10 submissions (max. 2 per
day).4

2The scorer, test cases and examples can be found in
the following GitHub repository https://github.com/
sheffieldnlp/fever-scorer

3https://competitions.codalab.org/

competitions/18814

4An extra half-day was given as an artifact of the compe-

tition closing at midnight paciﬁc time.

2Rank Team Name

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24

UNC-NLP
UCL Machine Reading Group
Athene UKP TU Darmstadt
Papelo
SWEEPer
Columbia NLP
Ohio State University
GESIS Cologne
FujiXerox
withdrawn
Uni-DuE Student Team
Directed Acyclic Graph
withdrawn
Py.ro
SIRIUS-LTG-UIO
withdrawn
BUPT-NLPer
withdrawn
withdrawn
FEVER Baseline
withdrawn
withdrawn
withdrawn
University of Arizona

Evidence (%)

Precision Recall
70.91
82.84
85.19
50.02
75.39
75.89
47.12
51.69
29.99
51.94
36.02
36.36
54.58
49.38
70.82
0.01
35.45
86.07
32.11
47.87
29.66
12.08
12.20
47.87

42.27
22.16
23.61
92.18
18.48
23.02
77.23
12.09
11.37
46.60
50.65
51.91
12.90
21.15
19.19
0.00
45.18
23.75
7.69
11.28
49.01
26.81
26.33
11.28

Label

Accuracy (%)

FEVER
Score (%)

68.21
67.62
65.46
61.08
59.72
57.45
50.12
54.15
47.13
51.25
50.02
51.36
53.97
43.48
48.87
33.45
45.37
33.33
50.80
48.84
44.89
57.32
55.42
36.94

64.21
62.52
61.58
57.36
49.94
49.06
43.42
40.77
38.81
38.59
38.50
38.33
37.13
36.58
36.55
30.20
29.22
28.67
28.40
27.45
23.76
22.89
21.71
19.00

F1
52.96
34.97
36.97
64.85
29.69
35.33
58.53
19.60
16.49
49.12
42.10
42.77
20.87
29.62
30.19
0.00
39.73
37.22
12.41
18.26
36.95
16.65
16.68
18.26

Table 2: Results on the test dataset.

3 Participants and Results

86 submissions (excluding the baseline) were
made to Codalab for scoring on the blind test set.
There were 23 different teams which participated
in the task (presented in Table 2). 19 of these
teams scored higher than the baseline presented in
Thorne et al. (2018). All participating teams were
invited to submit a description of their systems.
We received 15 descriptions at the time of writing
and the remaining are considered as withdrawn.
The system with the highest score was submitted
by UNC-NLP (FEVER score: 64.21%).

Most participants followed a similar pipeline
structure to the baseline model. This consisted
of three stages: document selection, sentence se-
lection and natural language inference. How-
ever, some teams constructed models to jointly
select sentences and perform inference in a sin-
gle pipeline step, while others added an additional
step, discarding inconsistent evidence after per-
forming inference.

Based on the team-submitted system descrip-
tion summaries (Appendix A), in the following
section we present an overview of which models
and techniques were applied to the task and their
relative performance.

4 Analysis
4.1 Document Selection
A large number of teams report a multi-step ap-
proach to document selection. The majority of
submissions report extracting some combination
of Named Entities, Noun Phrases and Capitalized
Expressions from the claim. These were used ei-
ther as inputs to a search API (i.e. Wikipedia
Search or Google Search), search server (e.g.
Lucene5 or Solr6) or as keywords for matching
against Wikipedia page titles or article bodies.
BUPT-NLPer report using S-MART for entity link-
ing (Yang and Chang, 2015) and the highest scor-

5http://lucene.apache.org/
6http://lucene.apache.org/solr/

3ing team, UNC-NLP, report using page viewership
statistics to rank the candidate pages. This ap-
proach cleverly exploits a bias in the dataset con-
struction, as the most visited pages were sampled
for claim generation. GESIS Cologne report di-
rectly selecting sentences using the Solr search,
bypassing the need to perform document retrieval
as a separate step.

The team which scored highest on evidence pre-
cision and evidence F1 was Papelo (precision =
92.18% and F1 = 64.85%) who report using a
combination of TF-IDF for document retrieval and
string matching using named entities and capital-
ized expressions.

The teams which scored highest on evidence
recall were Athene UKP TU Darmstadt (recall =
85.19%) and UCL Machine Reading Group (re-
call = 82.84%) 7 8 Athene report extracting noun-
phrases from the claim and using these to query
the Wikipedia search API. A similar approach was
used by Columbia NLP who query the Wikipedia
search API using named entities extracted from
the claim as a query string, all the text before
the ﬁrst lowercase verb phrase as a query string
and also combine this result with Wikipedia pages
identiﬁed with Google search using the entire
claim. UCL Machine Reading Group report a doc-
ument retrieval approach that identiﬁes Wikipedia
article titles within the claim and ranks the results
using features such as capitalization, sentence po-
sition and token match.

4.2 Sentence Selection
There were three common approaches to sentence
selection: keyword matching, supervised classiﬁ-
cation and sentence similarity scoring. Ohio State
and UCL Machine Reading Group report using
keyword matching techniques: matching either
named entities or tokens appearing in both the
claim and article body. UNC-NLP, Athene UKP
TU Darmstadt and Columbia NLP modeled the
task as supervised binary classiﬁcation, using ar-
chitectures such as Enhanced LSTM (Chen et al.,
2016), Decomposable Attention (Parikh et al.,
2016) or similar to them. SWEEPer and BUPT-
NLPer present jointly learned models for sentence

7The withdrawn team that ranked 18th on F1 score had
the highest recall: 86.07%. A system description was not
submitted by this team preventing us from including it in our
analysis.

8The scores for precision, recall and F1 were computed

independent of the label accuracy and FEVER Score.

selection and natural language inference. Other
teams report scoring based on sentence similar-
ity using Word Mover’s Distance (Kusner et al.,
2015) or cosine similarity over smooth inverse fre-
quency weightings (Arora et al., 2017), ELMo em-
beddings (Peters et al., 2018) and TF-IDF (Salton
et al., 1983). UCL Machine Reading Group and
Directed Acyclic Graph report an additional ag-
gregation stage after the classiﬁcation stage in the
pipeline where evidence that is inconsistent is dis-
carded.

4.3 Natural Language Inference
NLI was modeled as supervised classiﬁcation in
all reported submissions. We compare and dis-
cuss the approaches for combining the evidence
sentences together with the claim, sentence rep-
resentations and training schemes. While many
different approaches were used for sentence pair
classiﬁcation, e.g. Enhanced LSTM (Chen et al.,
2016), Decomposable Attention (Parikh et al.,
2016), Transformer Model (Radford and Sali-
mans, 2018), Random Forests (Svetnik et al.,
2003) and ensembles thereof, these are not speciﬁc
to the task and it is difﬁcult to assess their impact
due to the differences in the processing preceding
this stage.

Evidence Combination: UNC-NLP (the high-
est scoring team) concatenate the evidence sen-
tences into a single string for classiﬁcation; UCL
Machine Reading Group classify each evidence-
claim pair individually and aggregate the re-
sults using a simple multilayer perceptron (MLP);
Columbia NLP perform majority voting; and ﬁ-
nally, Athene-UKP TU Darmstadt encode each
evidence-claim pair individually using an En-
hanced LSTM, pool the resulting vectors and use
an MLP for classiﬁcation.

Sentence Representation: University of Ari-
zona explore using non-lexical features for pre-
dicting entailment, considering the proportion of
negated verbs, presence of antonyms and noun
overlap. Columbia NLP learn universal sentence
representations (Conneau et al., 2017). UNC-NLP
include an additional token-level feature the sen-
tence similarity score from the sentence selection
module. Both Ohio State and UNC-NLP report al-
ternative token encodings: UNC-NLP report using
ELMo (Peters et al., 2018) and WordNet (Miller,
1995) and Ohio State report using vector represen-

4tations of named entities. FujiXerox report repre-
senting sentences using DEISTE (Yin et al., 2018).

Training: BUPT-NLPer and SWEEPer model
the evidence selection and claim veriﬁcation us-
ing a multi-task learning model under the hypoth-
esis that information from each task supplements
the other. SWEEPer also report parameter tuning
using reinforcement learning.

5 Additional Annotation

As mentioned in the introduction, to increase the
evidence coverage in the test set, the evidence sub-
mitted by participating systems was annotated by
shared task volunteers after the competition ended.
There were 18,846 claims where at least one sys-
tem returned an incorrect label, according to the
FEVER score, i.e. taking evidence into account.
These claims were sampled for annotation with a
probability proportional to the number of systems
which labeled each of them incorrectly.

The evidence sentences returned by each sys-
tem for each claim was sampled further with a
probability proportional to the system’s FEVER
score in an attempt to focus annotation efforts to-
wards higher quality candidate evidence. These
extra annotations were performed by volunteers
from the teams participating in the shared task and
three of the organizers. Annotators were asked
to label whether the retrieved evidence sentences
supported or refuted the claim at question, and to
highlight which sentences (if any), either individu-
ally or as a group, can be used as evidence. We re-
tained the annotation guidelines from Thorne et al.
(2018) (see Sections A.7.1, A.7.3 and A.8 from
that paper for more details).

At the time of writing, 1,003 annotations were
collected for 618 claims. This identiﬁed 3 claims
that were incorrectly labeled as SUPPORTED or
REFUTED and 87 claims that were originally la-
beled as NOTENOUGHINFO that should be re-
labeled as SUPPORTED or REFUTED through the
introduction of new evidence (44 and 43 claims
respectively). 308 new evidence sets were identi-
ﬁed for claims originally labeled as SUPPORTED
or REFUTED, consisting of 280 single sentences
and 28 sets of 2 or more sentences.

Further annotation is in progress and the data
collected as well as the ﬁnal results will be made
public at the workshop.

6 Conclusions
The ﬁrst Fact Extraction and VERiﬁcation shared
task attracted submissions from 86 submissions
from 23 teams. 19 of these teams exceeded the
score of the baseline presented in Thorne et al.
(2018). For the teams which provided a system
description, we highlighted the approaches, iden-
tifying commonalities and features that could be
further explored.

Future work will address limitations in human-
annotated evidence and explore other subtasks
needed to predict the veracity of information ex-
tracted from untrusted sources.
Acknowledgements
The work reported was partly conducted while
James Thorne was at Amazon Research Cam-
bridge. Andreas Vlachos is supported by the EU
H2020 SUMMA project (grant agreement number
688139).

References
Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017.
A simple but tough to beat baseline for sentence em-
beddings. In Iclr, pages 1–14.

Sean Baird, Doug Sibley, and Yuxi Pan. 2017. Cisco’s
Talos Intelligence Group Blog Talos Targets Disin-
formation with Fake News Challenge Victory.

Samuel R. Bowman, Gabor Angeli, Christopher Potts,
and Christopher D. Manning. 2015. A large anno-
tated corpus for learning natural language inference.
In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing.

Danqi Chen, Adam Fisch, Jason Weston, and Antoine
Bordes. 2017. Reading Wikipedia to Answer Open-
Domain Questions. Proc. of ACL’17.

Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei, Hui
Jiang, and Diana Inkpen. 2016. Enhanced LSTM for
Natural Language Inference. In Proceedings of the
55th Annual Meeting of the Association for Compu-
tational Linguistics, pages 1657–1668, Vancouver,
Canada.

Alexis Conneau, Douwe Kiela, Holger Schwenk, Loic
Barrault, and Antoine Bordes. 2017. Supervised
Learning of Universal Sentence Representations
from Natural Language Inference Data. In Proceed-
ings of the 2017 Conference on Empirical Methods
in Natural Language Processing, pages 670–680,
Copenhagen, Denmark.

Ido Dagan, Bill Dolan, Bernardo Magnini, and Dan
Roth. 2009. Recognizing textual entailment: Ratio-
nal, evaluation and approaches. Natural Language
Engineering, 15(4):i–xvii.

5Tushar Khot, Ashish Sabharwal, and Peter Clark. 2018.
SCITAIL: A Textual Entailment Dataset from Sci-
ence Question Answering. Aaai.

Matt J Kusner, Yu Sun, Nicholas I Kolkin, and Kilian Q
Weinberger. 2015. From Word Embeddings To Doc-
ument Distances. Proceedings of The 32nd Inter-
national Conference on Machine Learning, 37:957–
966.

George a. Miller. 1995.

a lexical
database for English. Communications of the ACM,
38(11):39–41.

WordNet:

Ankur P. Parikh, Oscar T¨ackstr¨om, Dipanjan Das, and
Jakob Uszkoreit. 2016. A Decomposable Atten-
tion Model for Natural Language Inference. pages
2249–2255.

Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In Proceedings of NAACL-HLT, pages
2227–2237, New Orleans, Louisiana.

Alec Radford and Tim Salimans. 2018.

Improv-
ing Language Understanding by Generative Pre-
Training. arXiv, pages 1–12.

Gerard Salton, Edward A. Fox, and Harry Wu. 1983.
Extended boolean information retrieval. Commun.
ACM, 26(11):1022–1036.

Vladimir Svetnik, Andy Liaw, Christopher Tong,
J Christopher Culberson, Robert P Sheridan, and
Bradley P Feuston. 2003. Random forest: a clas-
siﬁcation and regression tool for compound classi-
ﬁcation and qsar modeling. Journal of chemical in-
formation and computer sciences, 43(6):1947–1958.

James

Thorne,

Andreas Vlachos,

Christos
Christodoulopoulos,
and Arpit Mittal. 2018.
FEVER: a large-scale dataset for fact extraction and
veriﬁcation. In NAACL-HLT.

Yi Yang and Ming-Wei Chang. 2015. S-MART: Novel
Tree-based Structured Learning Algorithms Applied
In Proceedings of the
to Tweet Entity Linking.
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing, pages
504–513, Beijing, China.

Wenpeng Yin, Hinrich Sch¨utze, and Dan Roth. 2018.
End-Task Oriented Textual Entailment via Deep Ex-
In Pro-
plorations of Inter-Sentence Interactions.
ceedings of the 56th Annual Meeting of the Associ-
ation for Computational Linguistics (Short Papers),
pages 540–545, Melbourne, Australia.

A Short System Descriptions Submitted

by Participants

A.1 UNC-NLP
Our system is composed of three connected com-
ponents namely, a document retriever, a sentence

selector, and a claim veriﬁer. The document
retriever chooses candidate wiki-documents via
matching of keywords between the claims and the
wiki-document titles, also using external page-
view frequency statistics for wiki-page ranking.
The sentence selector is a sequence-matching neu-
ral network that conducts further ﬁne-grained se-
lection of evidential sentences by comparing the
given claim with all the sentences in the candi-
date documents. This module is trained as a binary
classiﬁer given the ground truth evidence as pos-
itive examples and all the other sentences as neg-
ative examples with an annealing sampling strat-
egy. Finally, the claim veriﬁer is a state-of-the-
art 3-way neural natural language inference (NLI)
classiﬁer (with WordNet and ELMo features) that
takes the concatenation of all selected evidence as
the premise and the claim as the hypothesis, and
labels each such evidences-claim pair as one of
‘support’, ‘refute’, or ‘not enough info’. To im-
prove the claim veriﬁer via better awareness of the
selected evidence, we further combine the last two
modules by feeding the sentence similarity score
(produced by the sentence selector) as an addi-
tional token-level feature to the claim veriﬁer.

A.2 UCL Machine Reading Group
The UCLMR system is a four stage model consist-
ing of document retrieval, sentence retrieval, natu-
ral language inference and aggregation. Document
retrieval attempts to ﬁnd the name of a Wikipedia
article in the claim, and then ranks each article
based on capitalization, sentence position and to-
ken match features. A set of sentences are then
retrieved from the top ranked articles, based on to-
ken matches with the claim and position in the ar-
ticle. A natural language inference model is then
applied to each of these sentences paired with the
claim, giving a prediction for each potential evi-
dence. These predictions are then aggregated us-
ing a simple MLP, and the sentences are reranked
to keep only the evidence consistent with the ﬁnal
prediction.

applied the

retrieval We

A.3 Athene UKP TU Darmstadt
Document
con-
stituency parser from AllenNLP to extract noun
phrases in the claim and made use of Wikipedia
API to search corresponding pages for each noun
phrase. So as to remove noisy pages from the
results, we have stemmed the words of their titles
and the claim, and then discarded pages whose

6stemmed words of the title are not completely
included in the set of stemmed words in the claim.
Sentence selection The hinge loss with negative
sampling is applied to train the enhanced LSTM.
For a given positive claim-evidence pair, negative
samples are generated by randomly sampling sen-
tences from the retrieved documents.
RTE We combine the 5 sentences from sentence
selection and the claim to form 5 pairs and then
apply enhanced LSTM for each pair. We com-
bine the resulting representations using average
and max pooling and feed the resulting vector
through an MLP for classiﬁcation.

A.4 Papelo
We develop a system for the FEVER fact ex-
traction and veriﬁcation challenge that uses a
high precision entailment classiﬁer based on trans-
former networks pretrained with language model-
ing (Radford and Salimans, 2018), to classify a
broad set of potential evidence. The precision of
the entailment classiﬁer allows us to enhance re-
call by considering every statement from several
articles to decide upon each claim. We include not
only the articles best matching the claim text by
TFIDF score, but read additional articles whose ti-
tles match named entities and capitalized expres-
sions occurring in the claim text. The entailment
module evaluates potential evidence one statement
at a time, together with the title of the page the
evidence came from (providing a hint about pos-
sible pronoun antecedents). In preliminary evalu-
ation, the system achieved 57.36% FEVER score,
61.08% label accuracy, and 64.85% evidence F1
on the FEVER shared task test set.

A.5 SWEEPer
Our model for fact checking and veriﬁcation con-
sists of two stages: 1) identifying relevant docu-
ments using lexical and syntactic features from the
claim and ﬁrst two sentences in the Wikipedia ar-
ticle and 2) jointly modeling sentence extraction
and veriﬁcation. As the tasks of fact checking
and ﬁnding evidence are dependent on each other,
an ideal model would consider the veracity of the
claim when ﬁnding evidence and also ﬁnd only the
evidence that supports/refutes the position of the
claim. We thus jointly model the second stage by
using a pointer network with the claim and evi-
dence sentence represented using the ESIM mod-
ule. For stage 2, we ﬁrst train both components

using multi-task learning over a larger memory of
extracted sentences, then tune parameters using re-
inforcement learning to ﬁrst extract sentences and
predict the relation over only the extracted sen-
tences.

A.6 Columbia NLP
For document retrieval we use three components:
1) use google custom search API with the claim as
a query and return the top 2 Wikipedia pages; 2)
extract all name entities from the claims and use
Wikipedia python API to return a page for each
name entity and 3); use the preﬁx of the claim until
the ﬁrst lowercase verb phrase, and use Wikipedia
API to return the top page.

For Sentence Selection we used the modiﬁed
document retrieval component of DrQA to get the
top 5 sentences and then further extracted the top 3
sentences using cosine similarity between vectors
obtained from Elmo (Peters et al., 2018) sentence
embeddings of the claim and the evidence.

For RTE we used the same model as outlined
by (Conneau et al., 2017) in their work for rec-
ognizing textual entailment and learning universal
sentence representations. If at least one out of the
three evidences SUPPORTS/REFUTES the claim
and the rest are NOT ENOUGH INFO , then we
treat the label as SUPPORTS/REFUTES, else we
return the majority among three classes as the pre-
dicted label.

A.7 Ohio State University
Our system was developed using a heuristics-
based approach for evidence extraction and a mod-
iﬁed version of the inference model by Parikh
et al. (2016) for classiﬁcation into refute, sup-
port, or not enough info. Our process is bro-
ken down into three distinct phases. First, po-
tentially relevant documents are gathered based
on key words/phrases in the claim that appear in
the wiki dump. Second, any possible evidence
sentences inside those documents are extracted
by breaking down the claim into named entities
plus nouns and ﬁnding any sentences which match
those entities, while allowing for various excep-
tions and additional potential criteria to increase
recall. Finally, every sentences is classiﬁed into
one of the three categories by the inference tool,
after additional vectors are added based on named
entity types. NEI sentences are discarded and the
highest scored label of the remaining sentences is
assigned to the claim.

7A.8 GESIS Cologne
In our approach we used a sentence wise approach
in all components. To ﬁnd the sentences we set up
a Solr database and indexed every sentence includ-
ing information about the article where the sen-
tence is from. We created queries based on the
named entities and noun chunks of the claims. For
the entailment task we used a Decomposable At-
tention Model similar to the one used in the base-
line approach. But instead of comparing the claim
with all top 5 sentences at once we treat every sen-
tence separately. The results for the top 5 sentence
where then joined with an ensemble learner incl.
the rank of the sentence retriever of the wikipedia
sentences.

A.9 FujiXerox
We prepared a pipeline system which composes
of document selection, a sentence retrieval, and
a recognizing textual entailment (RTE) compo-
nents. A simple entity linking approach with text
match is used as the document selection com-
ponent, this component identiﬁes relevant docu-
ments for a given claim by using mentioned en-
tities as clues. The sentence retrieval component
selects relevant sentences as candidate evidence
from the documents based on TF-IDF. Finally,
the RTE component selects evidence sentences
by ranking the sentences and classiﬁes the claim
as SUPPORTED, REFUTED, or NOTENOUGH-
INFO simultaneously. As the RTE component,
we adopted DEISTE (Deep Explorations of Inter-
Sentence interactions for Textual Entailment) (Yin
et al., 2018) model that is the state-of-the-art in
RTE task.

A.10 Uni-DuE Student Team
We generate a Lucene index from the provided
Wikipedia dump. Then we use two neural net-
works, one for named entity recognition and the
other for constituency parsing, and also the Stan-
ford dependency parser to create the keywords
used inside the Lucene queries. Depending on
the amount of keywords found for each claim, we
run multiple Lucene searches on the generated in-
dex to create a list of candidate sentences for each
claim. The resulting list of claim-candidate pairs
is processed in three ways:

1. We use the Standford POS-Tagger to gen-
erate POS-Tags for the claim and candidate

sentences which are then used in a hand-
crafted scoring script to assign a score on a
0 to 15 scale.

2. We run each pair through a modiﬁed version

of the Decomposable Attention network.

3. We merge all candidate sentences per claim
into one long piece of text and run the result
paired with the claim through the same mod-
iﬁed Decomposable Attention network as in
(2.).

We then make the ﬁnal prediction in a hand-
crafted script combining the results of the three
previous steps.

A.11 Directed Acyclic Graph
In this paper, we describe the system we designed
for the FEVER 2018 Shared Task. The aim of this
task was to conceive a system that can not only
automatically assess the veracity of a claim but
also retrieve evidence supporting this assessment
from Wikipedia. In our approach, the Wikipedia
documents whose Term Frequency - Inverse Doc-
ument Frequency (TFIDF) vectors are most sim-
ilar to the vector of the claim and those docu-
ments whose names are similar to the named en-
tities (NEs) mentioned in the claim are identiﬁed
as the documents which might contain evidence.
The sentences in these documents are then sup-
plied to a decomposable attention-based textual
entailment recognition module. This module cal-
culates the probability of each sentence support-
ing the claim, contradicting the claim or not pro-
viding any relevant information. Various features
computed using these probabilities are ﬁnally used
by a Random Forest classiﬁer to determine the
overall truthfulness of the claim. The sentences
which support this classiﬁcation are returned as
evidence. Our approach achieved a 42.77% ev-
idence F1-score, a 51.36% label accuracy and a
38.33% FEVER score.

A.12 Py.ro
We NER tagged the claim using SpaCy and used
the Named Entities as candidate page IDs. We re-
solved redirects by following the Wikipedia URL
if an item was not in the preprocessed dump. If a
page could not be found, we fell back to the base-
line document selection method. The rest of the
system was identical to the baseline system, al-

8A.15 University of Arizona
Many approaches to automatically recognizing en-
tailment relations have employed classiﬁers over
hand engineered lexicalized features, or deep
learning models that implicitly capture lexicaliza-
tion through word embeddings. This reliance on
lexicalization may complicate the adaptation of
these tools between domains. For example, such a
system trained in the news domain may learn that a
sentence like “Palestinians recognize Texas as part
of Mexico” tends to be unsupported, a fact which
has no value in say a scientiﬁc domain. To mit-
igate this dependence on lexicalized information,
in this paper we propose a model that reads two
sentences, from any given domain, to determine
entailment without using any lexicalized features.
Instead our model relies on features like propor-
tion of negated verbs, antonyms, noun overlap etc.
In its current implementation, this model does not
perform well on the FEVER dataset, due to two
reasons. First, for the information retrieval part
of the task we used the baseline system provided,
since this was not the aim of our project. Sec-
ond, this is work in progress and we still are in
the process of identifying more features and grad-
ually increasing the accuracy of our model. In the
end, we hope to build a generic end-to-end clas-
siﬁer, which can be used in a domain outside the
one in which it was trained, with no or minimal
re-training.

though we used our document retrieval system to
generate alternative training data.

A.13 SIRIUS-LTG-UIO
This article presents the SIRIUS-LTG system for
the Fact Extraction and VERiﬁcation (FEVER)
Shared Task. Our system consists of three com-
ponents:

1. Wikipedia Page Retrieval: First we extract
the entities in the claim, then we ﬁnd poten-
tial Wikipedia URI candidates for each of the
entities using the SPARQL query over DBpe-
dia

2. Sentence selection: We investigate vari-
ous techniques i.e. SIF embedding, Word
Mover’s Distance (WMD), Soft-Cosine Sim-
ilarity, Cosine similarity with unigram TF-
IDF to rank sentences by their similarity to
the claim.

3. Textual Entailment: We compare three mod-
els for the claim classiﬁcation. We ap-
ply a Decomposable Attention (DA) model
(Parikh et al., 2016), a Decomposed Graph
Entailment (DGE) model (Khot et al., 2018)
and a Gradient-Boosted Decision Trees
(TalosTree) model (Baird et al., 2017) for this
task.

The experiments show that the pipeline with sim-
ple Cosine Similarity using TFIDF in sentence se-
lection along with DA as labeling model achieves
better results in development and test dataset.

A.14 BUPT-NLPer
We introduce an end-to-end multi-task learning
model for fact extraction and veriﬁcation with bi-
direction attention. We propose a multi-task learn-
ing framework for the evidence extraction and
claim veriﬁcation because these two tasks can be
accomplished at the same time. Each task provides
supplementary information for the other and im-
proves the results of another task.

For each claim, our system ﬁrstly uses the en-
tity linking tool S-MART to retrieve relative pages
from Wikipedia. Then, we use attention mecha-
nisms in both directions, claim-to-page and page-
to-claim, which provide complementary informa-
tion to each other. Aimed at the different task, our
system obtains claim-aware sentence representa-
tion for evidence extraction and page-aware claim
representation for claim veriﬁcation.

9